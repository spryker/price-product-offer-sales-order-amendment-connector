#!/usr/bin/env php
<?php

define('LOCAL_CI_ROOT', dirname(__DIR__, 5));

require_once LOCAL_CI_ROOT . '/vendor/autoload.php';
require_once __DIR__ . '/../src/CiCommand.php';
require_once __DIR__ . '/../src/CiRequest.php';
require_once __DIR__ . '/../src/CiResponse.php';

use SprykerCi\CiCommand;
use SprykerCi\CiResponse;
use SprykerCi\CiRequest;
use Symfony\Component\Process\Process;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputOption;
use Spryker\Shared\Config\Application\Environment;
use Spryker\Zed\ModuleFinder\Business\ModuleFinderFacade;
use Laminas\Filter\FilterChain;
use Laminas\Filter\StringToLower;
use Laminas\Filter\Word\CamelCaseToDash;
use Laminas\Filter\Word\SeparatorToSeparator;
use Generated\Shared\Transfer\ModuleTransfer;

!defined('APPLICATION_ROOT_DIR') && define('APPLICATION_ROOT_DIR', getcwd());
!defined('APPLICATION') && define('APPLICATION', 'Zed');

Environment::initialize();

$application = new Application('Local CI', '1.0.0');
$application->add(new class extends Command {
    protected InputInterface $input;
    protected OutputInterface $output;

    /**
     * @return void
     */
    protected function configure(): void
    {
        $this->setName('local-ci');
        $this->addOption('module', 'm', InputOption::VALUE_REQUIRED, 'Run only for the specified module. Use Fully Qualified Module name e.g. Spryker.FooBar');
        $this->addOption('command', 'c', InputOption::VALUE_REQUIRED, 'Run only the specified command.');
        $this->addOption('full', null, InputOption::VALUE_NONE, 'Full-run including preCommands (Transfer & DataBuilder)');
        $this->addOption('fix', 'f', InputOption::VALUE_NONE, 'Run a fix command before the command is executed when the command has a fix command.');
        $this->addOption('pre', 'p', InputOption::VALUE_NONE, 'Run preCommands (Transfer & DataBuilder)');
        $this->setHelp(<<<DESC
The <info>%command.name%</info> command runs the local CI for the Spryker modules.

Options ro run

<fg=green>vendor/bin/console local-ci</>  - Runs the local CI for all modules
<fg=green>vendor/bin/console local-ci --module=Spryker.FooBar</> - Runs the local CI for the specified module
<fg=green>vendor/bin/console local-ci --command=CodeStyleSniffer</> - Runs the specified command for all modules
<fg=green>vendor/bin/console local-ci --full</> - Runs the full local CI including preCommands
<fg=green>vendor/bin/console local-ci --fix (-f)</> - When the command has a fix command, then it will be executed before the command gets executed
<fg=green>vendor/bin/console local-ci --pre (-p)</> - Runs the preCommands (Transfer & DataBuilder)
<fg=green> vendor/bin/console local-ci --module=Spryker.FooBar --command=CodeStyleSniffer</> - Runs the specified command for the specified module
DESC
);
    }

    protected function initialize(InputInterface $input, OutputInterface $output)
    {
        $this->input = $input;
        $this->output = $output;

        parent::initialize($input, $output);
    }


    /**
     * @param \Symfony\Component\Console\Input\InputInterface $input
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     *
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->checkXDebugEnabled();

        $output->writeln('Running Local CI');

        $ciRequest = new CiRequest();
        $ciRequest = $this->setupCiRequest($ciRequest);

        $ciResponse = new CiResponse();

        // This is for now only informative output and will probably later be used to run the CI on these modules.
        $output->writeln(sprintf('Your changed modules are used by <fg=green>%s</> other modules.', count($ciRequest->getModulesUsedByChangedModules())), OutputInterface::VERBOSITY_NORMAL);

        $this->runPreCommands($ciRequest);

        $ciResponse = $this->runCommandsOnModules($ciRequest, $ciResponse);

        $this->printErrors($ciResponse);

        return count($ciResponse->getErrors()) ? static::FAILURE : static::SUCCESS;
    }

    protected function runCommandsOnModules(CiRequest $ciRequest, CiResponse $ciResponse): CiResponse
    {
        foreach ($ciRequest->getModulesToRun() as $moduleName => $moduleTransfer) {
            $this->output->writeln(sprintf('Module <fg=green>%s</>', $moduleName), OutputInterface::VERBOSITY_NORMAL);

            foreach ($ciRequest->getCommandsToRun() as $commandName => $commandData) {
                $ciCommand = new CiCommand($commandName, $commandData, $moduleTransfer);

                $this->runCommandsOnModule(
                    $ciCommand,
                    $ciRequest,
                    $ciResponse
                );
            }

            $this->output->writeln('');
        }

        return $ciResponse;
    }

    protected function setupCiRequest(CiRequest $ciRequest): CiRequest
    {
        $ciRequest
            ->setShouldRunPreCommands((bool) $this->input->getOption('pre') ?? false)
            ->setShouldRunFixCommands((bool) $this->input->getOption('fix') ?? false);

        $ciRequest = $this->setupModules($ciRequest);

        return $this->setupCommands($ciRequest);
    }

    protected function setupModules(CiRequest $ciRequest): CiRequest
    {
        $moduleNameToRun = $this->input->getOption('module');

        $moduleFinderFacade = new ModuleFinderFacade();
        $allModulesList = $moduleFinderFacade->getModules();

        $touchedModuleList = $this->getTouchedModuleList($allModulesList);

        foreach ($touchedModuleList as $fullyQualifiedModuleName => $moduleCiDefinition) {
            if ($moduleNameToRun && $moduleNameToRun !== $fullyQualifiedModuleName) {
                $ciRequest->addModuleToSkip($fullyQualifiedModuleName);

                continue;
            }

            $ciRequest->addModuleToRun($fullyQualifiedModuleName, $moduleCiDefinition['moduleTransfer']);
        }

        return $this->getModulesUsingChangedModules($allModulesList, $ciRequest);
    }

    protected function setupCommands(CiRequest $ciRequest): CiRequest
    {
        $commandNameToRun = $this->input->getOption('command');

        $commands = $this->getCommands();

        foreach ($commands as $commandName => $commandDefinition) {
            if ($commandNameToRun && $commandName !== $commandNameToRun) {
                continue;
            }

            $ciRequest->addCommandToRun($commandName, $commandDefinition);
        }

        return $ciRequest;
    }

    protected function runCommandsOnModule(
        CiCommand $ciCommand,
        CiRequest $ciRequest,
        CiResponse $ciResponse
    ): CiResponse
    {
        if ($ciCommand->shouldBeSkipped()) {
            return $ciResponse;
        }

        if ($ciRequest->shouldRunFixCommands() && $ciCommand->hasFixCommand()) {
            $this->runCommand($ciCommand, $ciResponse, true);
        }

        return $this->runCommand($ciCommand, $ciResponse);
    }

    protected function checkXDebugEnabled(): void
    {
        if (extension_loaded('xdebug')) {
            $this->output->writeln('');
            $this->output->writeln('*********************************************************************');
            $this->output->writeln('* <fg=yellow>Xdebug is enabled, you should disable it for performance reasons.</> *');
            $this->output->writeln('*********************************************************************');
            $this->output->writeln('');
        }
    }

    protected function runCommand(CiCommand $ciCommand, CiResponse $ciResponse, bool $fixCommand = false): CiResponse
    {
        $this->output->writeln(sprintf('Command <fg=yellow>%s</>', $ciCommand->getCommandName()), OutputInterface::VERBOSITY_VERBOSE);

        $commandToRun = $fixCommand ? $ciCommand->getFixCommand() : $ciCommand->getCommand();

        $this->output->writeln(implode(' ', $commandToRun), OutputInterface::VERBOSITY_VERBOSE);

        $process = $this->getProcess($ciCommand, $fixCommand);

        $process->run(function ($type, $buffer) {
            if ($this->output->getVerbosity() >= OutputInterface::VERBOSITY_VERY_VERBOSE) {
                echo $buffer;
            }
        });

        if ($fixCommand) {
            return $ciResponse;
        }

        if (!$process->isSuccessful()) {
            $ciResponse->addError($ciCommand->getModuleName(), $ciCommand->getCommandName(), implode(' ', $commandToRun));

            $this->output->writeln(sprintf('Command <fg=red>%s failed</> for module %s', $ciCommand->getCommandName(), $ciCommand->getModuleName()), OutputInterface::VERBOSITY_NORMAL);

            return $ciResponse;
        }

        $this->output->writeln(sprintf('Command <fg=green>%s succeeded</> for module %s', $ciCommand->getCommandName(), $ciCommand->getModuleName()), OutputInterface::VERBOSITY_NORMAL);

        return $ciResponse;
    }

    protected function getProcess(CiCommand $ciCommand, bool $isFix = false): Process
    {
        $commandToRun = $isFix ? $ciCommand->getFixCommand() : $ciCommand->getCommand();

        if ($ciCommand->isShellCommand()) {
            return Process::fromShellCommandline(implode($commandToRun), $ciCommand->getPath());
        }

        return new Process($commandToRun, $ciCommand->getPath());

    }

    protected function getModulesUsingChangedModules(array $allModulesList, CiRequest $ciRequest): CiRequest
    {
        foreach ($allModulesList as $moduleTransfer) {
            $composerJsonPath = $moduleTransfer->getPath() . '/composer.json';

            if (!file_exists($composerJsonPath)) {
                $this->output->writeln(sprintf('<fg=yellow>Composer json file not found in path "%s".</>', $composerJsonPath), OutputInterface::VERBOSITY_VERY_VERBOSE);

                continue;
            }

            $composerJsonContent = file_get_contents($composerJsonPath);

            foreach ($ciRequest->getModulesToRun() as $moduleToRunTransfer) {
                $modulePackageName = sprintf('%s/%s', $moduleToRunTransfer->getOrganization()->getNameDashed(), $moduleToRunTransfer->getNameDashed());

                if (strpos($composerJsonContent, $modulePackageName) === false) {
                    continue;
                }

                $moduleUsingModule = sprintf('%s.%s', $moduleTransfer->getOrganization()->getName(), $moduleTransfer->getName());

                $ciRequest->addModuleUsedByChangedModule($moduleUsingModule, $modulePackageName);
            }
        }

        return $ciRequest;
    }

    /**
     * This method has to make use of the Diff to get the list of the touched modules.
     *
     * @param array $allModulesList
     * @return array
     */
    protected function getTouchedModuleList(array $allModulesList): array
    {
        $moduleListFile = file_exists(LOCAL_CI_ROOT . '/.local-ci.modules') ? '.local-ci.modules' : '.local-ci.modules.dist';

        $moduleList = require LOCAL_CI_ROOT . '/' . $moduleListFile;

        $namedModuleList = [];

        foreach ($moduleList as $module) {
            $namedModuleList[$module['module']] = $module;
        }

        foreach ($allModulesList as $moduleTransfer) {
            $name = sprintf('%s.%s', $moduleTransfer->getOrganization()->getName(), $moduleTransfer->getName());

            if (isset($namedModuleList[$name])) {
                $namedModuleList[$name]['moduleTransfer'] = $moduleTransfer;
            }
        }

        return $namedModuleList;
    }

    /**
     * @return array<string, array<string|bool|array<string>>>
     */
    protected function getCommands(): array
    {
        return include_once __DIR__ . '/commandList.php';
    }

    /**
     * @return array<string, array<string|bool|array<string>>>
     */
    protected function getPreCommands(): array
    {
        return include_once __DIR__ . '/preCommandList.php';
    }

    protected function runPreCommands(CiRequest $ciRequest): void
    {
        if (!$ciRequest->shouldRunPreCommands()) {
            return;
        }

        $this->output->writeln('Running preCommands', OutputInterface::VERBOSITY_NORMAL);

        $preCommandList = $this->getPreCommands();

        foreach ($preCommandList as $commandData) {
            $this->output->writeln(sprintf('Running <fg=yellow>%s</>', $commandData['command']), OutputInterface::VERBOSITY_NORMAL);
            $this->output->writeln(implode(' ', $commandData['command']), OutputInterface::VERBOSITY_VERBOSE);

            $process = new Process($commandData['command']);

            $process->run(function ($type, $buffer) {
                if ($this->output->getVerbosity() >= OutputInterface::VERBOSITY_VERY_VERBOSE) {
                    echo $buffer;
                }
            });
        }
    }

    /**
     * @return void
     */
    protected function printErrors(CiResponse $ciResponse): void
    {
        foreach ($ciResponse->getErrors() as $moduleName => $failedCommands) {
            $this->output->writeln(sprintf('Module <fg=red>%s</> failed the following commands:', $moduleName));

            foreach ($failedCommands as $failedCommandName => $failedCommand) {
                $this->output->writeln(sprintf(' - %s (<fg=yellow>%s</>)', $failedCommandName, $failedCommand));
            }

            $this->output->writeln('');
        }
    }
});

$application->setDefaultCommand('local-ci', true);
$application->run();
